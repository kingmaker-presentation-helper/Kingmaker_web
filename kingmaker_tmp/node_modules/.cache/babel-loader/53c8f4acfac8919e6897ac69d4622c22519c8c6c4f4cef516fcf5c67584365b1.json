{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\github\\\\Kingmaker_web\\\\kingmaker_tmp\\\\boot\\\\src\\\\pages\\\\MainPage\\\\component\\\\recent_practice.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RecentPractice = () => {\n  _s();\n  const getContainerStyle = () => ({\n    // overflowX: 'auto',\n    // whiteSpace: 'nowrap'\n  });\n  const getItemStyle = () => ({\n    // display: 'inline-block',\n  });\n  const imgs = ['img/ppt1.jpg', 'img/ppt2.png', 'img/ppt3.png', 'img/ppt4.jpg'];\n  const [item, setItem] = useState([{\n    id: 1,\n    url: 'img/ppt1.jpg'\n  }, {\n    id: 2,\n    url: 'img/ppt2.jpg'\n  }, {\n    id: 3,\n    url: 'img/ppt3.jpg'\n  }, {\n    id: 4,\n    url: 'img/ppt4.jpg'\n  }]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const fakeData = 2;\n  const setSliders = () => {\n    const addedFront = [];\n    const addedLast = [];\n    let index = 0;\n    while (index < fakeData) {\n      addedLast.push(item[index % item.length]);\n      addedFront.unshift(item[item.length - 1 - index % item.length]);\n      index++;\n    }\n    return [...addedFront, ...item, ...addedLast];\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"carousel\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"carouselBox\",\n        children: imgs.map((path, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"carouselItem\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn btn-link\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: path,\n              class: \"d-block\",\n              alt: `이미지 ${index + 1}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(RecentPractice, \"qeDYgKe1C7b1ido/C8dWhAoa0u4=\");\n_c = RecentPractice;\nexport default RecentPractice;\nvar _c;\n$RefreshReg$(_c, \"RecentPractice\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","RecentPractice","_s","getContainerStyle","getItemStyle","imgs","item","setItem","id","url","currentIndex","setCurrentIndex","fakeData","setSliders","addedFront","addedLast","index","push","length","unshift","children","class","map","path","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/github/Kingmaker_web/kingmaker_tmp/boot/src/pages/MainPage/component/recent_practice.js"],"sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\n\r\nconst RecentPractice =()=>{\r\n\r\n    const getContainerStyle =()=>({\r\n        // overflowX: 'auto',\r\n        // whiteSpace: 'nowrap'\r\n    });\r\n\r\n    const getItemStyle=()=>({\r\n        // display: 'inline-block',\r\n    });\r\n\r\n    const imgs = [\r\n        'img/ppt1.jpg',\r\n        'img/ppt2.png',\r\n        'img/ppt3.png',\r\n        'img/ppt4.jpg',\r\n    ];\r\n\r\n    const [item, setItem] = useState([\r\n        {\r\n            id: 1,\r\n            url: 'img/ppt1.jpg'\r\n        },\r\n        {\r\n            id: 2,\r\n            url: 'img/ppt2.jpg'\r\n        },\r\n        {\r\n            id: 3,\r\n            url: 'img/ppt3.jpg'\r\n        },\r\n        {\r\n            id: 4,\r\n            url: 'img/ppt4.jpg'\r\n        }\r\n    ]);\r\n\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const fakeData = 2;\r\n    const setSliders=()=>{\r\n        const addedFront = [];\r\n        const addedLast = [];\r\n        let index = 0;\r\n        while (index < fakeData) {\r\n            addedLast.push(item[index % item.length]);\r\n            addedFront.unshift(item[item.length - 1 - (index % item.length)]);\r\n            index++;\r\n        }\r\n\r\n        return [...addedFront, ...item, ...addedLast];\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <div class='carousel'>\r\n            <div class='carouselBox'>\r\n            {imgs.map((path, index) => (\r\n                <div key={index} class=\"carouselItem\">\r\n                    <button class='btn btn-link'>\r\n                        <img src={path} class=\"d-block\" alt={`이미지 ${index + 1}`} />\r\n                    </button>\r\n                </div>\r\n            ))}\r\n            </div>\r\n        </div>\r\n        {/* <div class=\"container pt-4 px-4 m-0\"> \r\n            <div class=\"container-fluid bg-light rounded p-4\">\r\n                <h6 class=\"mb-0\">최근 연습</h6>\r\n                <div class=\"d-flex overflow-auto\" style={getContainerStyle()}>\r\n                    {imgs.map((path, index) => (\r\n                        <div key={index} class=\"\" style={getItemStyle()}>\r\n                            <button class='btn btn-link'>\r\n                                <img src={path} class=\"d-block\" alt={`이미지 ${index + 1}`} />\r\n                            </button>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RecentPractice;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEzD,MAAMC,cAAc,GAAEA,CAAA,KAAI;EAAAC,EAAA;EAEtB,MAAMC,iBAAiB,GAAEA,CAAA,MAAK;IAC1B;IACA;EAAA,CACH,CAAC;EAEF,MAAMC,YAAY,GAACA,CAAA,MAAK;IACpB;EAAA,CACH,CAAC;EAEF,MAAMC,IAAI,GAAG,CACT,cAAc,EACd,cAAc,EACd,cAAc,EACd,cAAc,CACjB;EAED,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAC7B;IACIY,EAAE,EAAE,CAAC;IACLC,GAAG,EAAE;EACT,CAAC,EACD;IACID,EAAE,EAAE,CAAC;IACLC,GAAG,EAAE;EACT,CAAC,EACD;IACID,EAAE,EAAE,CAAC;IACLC,GAAG,EAAE;EACT,CAAC,EACD;IACID,EAAE,EAAE,CAAC;IACLC,GAAG,EAAE;EACT,CAAC,CACJ,CAAC;EAEF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAMgB,QAAQ,GAAG,CAAC;EAClB,MAAMC,UAAU,GAACA,CAAA,KAAI;IACjB,MAAMC,UAAU,GAAG,EAAE;IACrB,MAAMC,SAAS,GAAG,EAAE;IACpB,IAAIC,KAAK,GAAG,CAAC;IACb,OAAOA,KAAK,GAAGJ,QAAQ,EAAE;MACrBG,SAAS,CAACE,IAAI,CAACX,IAAI,CAACU,KAAK,GAAGV,IAAI,CAACY,MAAM,CAAC,CAAC;MACzCJ,UAAU,CAACK,OAAO,CAACb,IAAI,CAACA,IAAI,CAACY,MAAM,GAAG,CAAC,GAAIF,KAAK,GAAGV,IAAI,CAACY,MAAO,CAAC,CAAC;MACjEF,KAAK,EAAE;IACX;IAEA,OAAO,CAAC,GAAGF,UAAU,EAAE,GAAGR,IAAI,EAAE,GAAGS,SAAS,CAAC;EACjD,CAAC;EAED,oBACIjB,OAAA,CAAAE,SAAA;IAAAoB,QAAA,eACAtB,OAAA;MAAKuB,KAAK,EAAC,UAAU;MAAAD,QAAA,eACjBtB,OAAA;QAAKuB,KAAK,EAAC,aAAa;QAAAD,QAAA,EACvBf,IAAI,CAACiB,GAAG,CAAC,CAACC,IAAI,EAAEP,KAAK,kBAClBlB,OAAA;UAAiBuB,KAAK,EAAC,cAAc;UAAAD,QAAA,eACjCtB,OAAA;YAAQuB,KAAK,EAAC,cAAc;YAAAD,QAAA,eACxBtB,OAAA;cAAK0B,GAAG,EAAED,IAAK;cAACF,KAAK,EAAC,SAAS;cAACI,GAAG,EAAG,OAAMT,KAAK,GAAG,CAAE;YAAE;cAAAU,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvD;QAAC,GAHHb,KAAK;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIV,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC,gBAeJ,CAAC;AAEX,CAAC;AAAC3B,EAAA,CAjFID,cAAc;AAAA6B,EAAA,GAAd7B,cAAc;AAmFpB,eAAeA,cAAc;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}